const appModules = require('./appModules')['modules'];
const _ = require('lodash');

/* DOC:
  _(value)
  Creates a lodash object which wraps value to enable implicit method chain sequences. Methods that operate on and return arrays, collections, and functions can be chained together. Methods that retrieve a single value or may return a primitive value will automatically end the chain sequence and return the unwrapped value. Otherwise, the value must be unwrapped with _#value.

--------------------------------------------------------------------------------------------------------------
  _.mapKeys
  The opposite of _.mapValues; this method creates an object with the same values as object and keys generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments: (value, key, object).
    
    _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
      return key + value;
    });
    // => { 'a1': 1, 'b2': 2 }
--------------------------------------------------------------------------------------------------------------
  _.mapValues
  Creates an object with the same keys as object and values generated by running each own enumerable string keyed property of object thru iteratee. The iteratee is invoked with three arguments: (value, key, object).
    
    const users = {
      'fred':    { 'user': 'fred',    'age': 40 },
      'pebbles': { 'user': 'pebbles', 'age': 1 }
    };
    
    _.mapValues(users, function(o) { return o.age; });
    // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    
    // The `_.property` iteratee shorthand.
    _.mapValues(users, 'age');
    // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
-------------------------------------------------------------------------------------------------------------
*/
exports.handlers = _(appModules)
  .mapKeys(module => module) 
  .mapValues((module) => {
    try {
      // console.log('handlers.js returns => ',require(`../modules/${module}/Handler`)['handler']);
      return require(`../modules/${process.env.API_VERSION}/${module}/Handler`)['handler']; /* handlers.js returns =>  
                                                                      { GET_ALL: [Function: GET_ALL],
                                                                        POST: [Function: POST],
                                                                        GET: [Function: GET]}
                                                                  */
    } catch (error) {
      console.log(error);
      throw 'Handler names are not configured properly';
    }
  }).value();
